# HG changeset patch
# User Russ Cox <rsc@golang.org>
# Date 1411083606 14400
#      Thu Sep 18 19:40:06 2014 -0400
# Node ID 549a203eb3f770b8297647f00b3c89a5c45d7a0b
# Parent  f504e66669e777f4bd9b46504ddfd8ab6ec8be07
syscall: fix infinite recursion in itoa

Fixes issue 8332.

LGTM=dvyukov
R=golang-codereviews, dvyukov
CC=golang-codereviews
https://codereview.appspot.com/138650044

diff -r f504e66669e7 -r 549a203eb3f7 src/syscall/export_test.go
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/src/pkg/syscall/export_test.go	Thu Sep 18 19:40:06 2014 -0400
@@ -0,0 +1,7 @@
+// Copyright 2014 The Go Authors.  All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package syscall
+
+var Itoa = itoa
diff -r f504e66669e7 -r 549a203eb3f7 src/syscall/str.go
--- a/src/pkg/syscall/str.go	Thu Sep 18 15:43:06 2014 -0700
+++ b/src/pkg/syscall/str.go	Thu Sep 18 19:40:06 2014 -0400
@@ -6,8 +6,12 @@
 
 func itoa(val int) string { // do it here rather than with fmt to avoid dependency
 	if val < 0 {
-		return "-" + itoa(-val)
+		return "-" + uitoa(uint(-val))
 	}
+	return uitoa(uint(val))
+}
+
+func uitoa(val uint) string {
 	var buf [32]byte // big enough for int64
 	i := len(buf) - 1
 	for val >= 10 {
diff -r f504e66669e7 -r 549a203eb3f7 src/syscall/syscall_test.go
--- a/src/pkg/syscall/syscall_test.go	Thu Sep 18 15:43:06 2014 -0700
+++ b/src/pkg/syscall/syscall_test.go	Thu Sep 18 19:40:06 2014 -0400
@@ -5,6 +5,7 @@
 package syscall_test
 
 import (
+	"fmt"
 	"syscall"
 	"testing"
 )
@@ -28,3 +29,19 @@
 	// make sure TESTENV gets set to "", not deleted
 	testSetGetenv(t, "TESTENV", "")
 }
+
+func TestItoa(t *testing.T) {
+	// Make most negative integer: 0x8000...
+	i := 1
+	for i<<1 != 0 {
+		i <<= 1
+	}
+	if i >= 0 {
+		t.Fatal("bad math")
+	}
+	s := syscall.Itoa(i)
+	f := fmt.Sprint(i)
+	if s != f {
+		t.Fatalf("itoa(%d) = %s, want %s", i, s, f)
+	}
+}
