From 2c31c42616ef2f8606a49d4912b2e68f821d8367 Mon Sep 17 00:00:00 2001
From: W-Mark Kubacki <wmark@hurrikane.de>
Date: Wed, 23 Apr 2014 14:15:23 +0200
Subject: [PATCH 1/5] TLS SNI support

---
 Lib/ftplib.py  |  8 ++++++--
 Lib/httplib.py |  4 +++-
 Lib/poplib.py  |  4 +++-
 Lib/smtplib.py |  8 ++++++--
 Lib/ssl.py     | 10 ++++++++--
 Modules/_ssl.c | 19 ++++++++++++++-----
 6 files changed, 40 insertions(+), 13 deletions(-)

diff --git a/Lib/ftplib.py b/Lib/ftplib.py
index c98290c..5b1c963 100644
--- a/Lib/ftplib.py
+++ b/Lib/ftplib.py
@@ -660,8 +660,10 @@ else:
                 resp = self.voidcmd('AUTH TLS')
             else:
                 resp = self.voidcmd('AUTH SSL')
+            server_hostname = self.host if ssl.HAS_SNI else None
             self.sock = ssl.wrap_socket(self.sock, self.keyfile, self.certfile,
-                                        ssl_version=self.ssl_version)
+                                        ssl_version=self.ssl_version,
+                                        server_hostname=server_hostname)
             self.file = self.sock.makefile(mode='rb')
             return resp
 
@@ -692,8 +694,10 @@ else:
         def ntransfercmd(self, cmd, rest=None):
             conn, size = FTP.ntransfercmd(self, cmd, rest)
             if self._prot_p:
+                server_hostname = self.host if ssl.HAS_SNI else None
                 conn = ssl.wrap_socket(conn, self.keyfile, self.certfile,
-                                       ssl_version=self.ssl_version)
+                                       ssl_version=self.ssl_version,
+                                       server_hostname=server_hostname)
             return conn, size
 
         def retrbinary(self, cmd, callback, blocksize=8192, rest=None):
diff --git a/Lib/httplib.py b/Lib/httplib.py
index 5c919d2..c51d4af 100644
--- a/Lib/httplib.py
+++ b/Lib/httplib.py
@@ -1173,7 +1173,9 @@ else:
             if self._tunnel_host:
                 self.sock = sock
                 self._tunnel()
-            self.sock = ssl.wrap_socket(sock, self.key_file, self.cert_file)
+            server_hostname = self.host if ssl.HAS_SNI else None
+            self.sock = ssl.wrap_socket(sock, self.key_file, self.cert_file,
+                                        server_hostname=server_hostname)
 
     __all__.append("HTTPSConnection")
 
diff --git a/Lib/poplib.py b/Lib/poplib.py
index dc7cbdf..8031834 100644
--- a/Lib/poplib.py
+++ b/Lib/poplib.py
@@ -349,7 +349,9 @@ else:
             if not self.sock:
                 raise socket.error, msg
             self.file = self.sock.makefile('rb')
-            self.sslobj = ssl.wrap_socket(self.sock, self.keyfile, self.certfile)
+            server_hostname = self.host if ssl.HAS_SNI else None
+            self.sslobj = ssl.wrap_socket(self.sock, self.keyfile, self.certfile,
+                                          server_hostname=server_hostname)
             self._debugging = 0
             self.welcome = self._getresp()
 
diff --git a/Lib/smtplib.py b/Lib/smtplib.py
index 7f07840..a780bc1 100755
--- a/Lib/smtplib.py
+++ b/Lib/smtplib.py
@@ -639,7 +639,9 @@ class SMTP:
         if resp == 220:
             if not _have_ssl:
                 raise RuntimeError("No SSL support included in this Python")
-            self.sock = ssl.wrap_socket(self.sock, keyfile, certfile)
+            server_hostname = self.host if ssl.HAS_SNI else None
+            self.sock = ssl.wrap_socket(self.sock, keyfile, certfile,
+                                        server_hostname=server_hostname)
             self.file = SSLFakeFile(self.sock)
             # RFC 3207:
             # The client MUST discard any knowledge obtained from
@@ -784,7 +786,9 @@ if _have_ssl:
             if self.debuglevel > 0:
                 print>>stderr, 'connect:', (host, port)
             new_socket = socket.create_connection((host, port), timeout)
-            new_socket = ssl.wrap_socket(new_socket, self.keyfile, self.certfile)
+            server_hostname = self.host if (ssl.HAS_SNI and self.host) else None
+            new_socket = ssl.wrap_socket(new_socket, self.keyfile, self.certfile,
+                                         server_hostname=server_hostname)
             self.file = SSLFakeFile(new_socket)
             return new_socket
 
diff --git a/Lib/ssl.py b/Lib/ssl.py
index 329b9d1..16d0ce6 100644
--- a/Lib/ssl.py
+++ b/Lib/ssl.py
@@ -106,6 +106,7 @@ class SSLSocket(socket):
     def __init__(self, sock, keyfile=None, certfile=None,
                  server_side=False, cert_reqs=CERT_NONE,
                  ssl_version=PROTOCOL_SSLv23, ca_certs=None,
+                 server_hostname=None,
                  do_handshake_on_connect=True,
                  suppress_ragged_eofs=True, ciphers=None):
         socket.__init__(self, _sock=sock._sock)
@@ -138,6 +139,7 @@ class SSLSocket(socket):
             self._sslobj = _ssl.sslwrap(self._sock, server_side,
                                         keyfile, certfile,
                                         cert_reqs, ssl_version, ca_certs,
+                                        server_hostname,
                                         ciphers)
             if do_handshake_on_connect:
                 self.do_handshake()
@@ -146,6 +148,7 @@ class SSLSocket(socket):
         self.cert_reqs = cert_reqs
         self.ssl_version = ssl_version
         self.ca_certs = ca_certs
+        self.server_hostname = server_hostname
         self.ciphers = ciphers
         self.do_handshake_on_connect = do_handshake_on_connect
         self.suppress_ragged_eofs = suppress_ragged_eofs
@@ -311,7 +314,7 @@ class SSLSocket(socket):
             raise ValueError("attempt to connect already-connected SSLSocket!")
         self._sslobj = _ssl.sslwrap(self._sock, False, self.keyfile, self.certfile,
                                     self.cert_reqs, self.ssl_version,
-                                    self.ca_certs, self.ciphers)
+                                    self.ca_certs, self.server_hostname, self.ciphers)
         try:
             if return_errno:
                 rc = socket.connect_ex(self, addr)
@@ -352,6 +355,7 @@ class SSLSocket(socket):
                               cert_reqs=self.cert_reqs,
                               ssl_version=self.ssl_version,
                               ca_certs=self.ca_certs,
+                              server_hostname=None,
                               ciphers=self.ciphers,
                               do_handshake_on_connect=self.do_handshake_on_connect,
                               suppress_ragged_eofs=self.suppress_ragged_eofs),
@@ -376,6 +380,7 @@ class SSLSocket(socket):
 def wrap_socket(sock, keyfile=None, certfile=None,
                 server_side=False, cert_reqs=CERT_NONE,
                 ssl_version=PROTOCOL_SSLv23, ca_certs=None,
+                server_hostname=None,
                 do_handshake_on_connect=True,
                 suppress_ragged_eofs=True, ciphers=None):
 
@@ -384,6 +389,7 @@ def wrap_socket(sock, keyfile=None, certfile=None,
                      ssl_version=ssl_version, ca_certs=ca_certs,
                      do_handshake_on_connect=do_handshake_on_connect,
                      suppress_ragged_eofs=suppress_ragged_eofs,
+                     server_hostname=server_hostname,
                      ciphers=ciphers)
 
 
@@ -466,7 +472,7 @@ def sslwrap_simple(sock, keyfile=None, certfile=None):
         sock = sock._sock
 
     ssl_sock = _ssl.sslwrap(sock, 0, keyfile, certfile, CERT_NONE,
-                            PROTOCOL_SSLv23, None)
+                            PROTOCOL_SSLv23, None, None, None)
     try:
         sock.getpeername()
     except socket_error:
diff --git a/Modules/_ssl.c b/Modules/_ssl.c
index ba64555..cd417d0 100644
--- a/Modules/_ssl.c
+++ b/Modules/_ssl.c
@@ -267,7 +267,7 @@ newPySSLObject(PySocketSockObject *Sock, char *key_file, char *cert_file,
                enum py_ssl_server_or_client socket_type,
                enum py_ssl_cert_requirements certreq,
                enum py_ssl_version proto_version,
-               char *cacerts_file, char *ciphers)
+               char *cacerts_file, char *server_hostname, char *ciphers)
 {
     PySSLObject *self;
     char *errstr = NULL;
@@ -386,6 +386,14 @@ newPySSLObject(PySocketSockObject *Sock, char *key_file, char *cert_file,
 
     PySSL_BEGIN_ALLOW_THREADS
     self->ssl = SSL_new(self->ctx); /* New ssl struct */
+#if OPENSSL_VERSION_NUMBER >= 0x0090806fL && !defined(OPENSSL_NO_TLSEXT)
+    /* If SNI isn't supported, we just don't call it and fail silently,
+     * as there's not much else we can do.
+     */
+    if ((socket_type == PY_SSL_CLIENT) &&
+             (proto_version != PY_SSL_VERSION_SSL2) && server_hostname)
+        SSL_set_tlsext_host_name(self->ssl, server_hostname);
+#endif
     PySSL_END_ALLOW_THREADS
     SSL_set_fd(self->ssl, Sock->sock_fd);       /* Set the socket for SSL */
 #ifdef SSL_MODE_AUTO_RETRY
@@ -428,15 +436,16 @@ PySSL_sslwrap(PyObject *self, PyObject *args)
     char *key_file = NULL;
     char *cert_file = NULL;
     char *cacerts_file = NULL;
+    char *server_hostname = NULL;
     char *ciphers = NULL;
 
-    if (!PyArg_ParseTuple(args, "O!i|zziizz:sslwrap",
+    if (!PyArg_ParseTuple(args, "O!i|zziizzz:sslwrap",
                           PySocketModule.Sock_Type,
                           &Sock,
                           &server_side,
                           &key_file, &cert_file,
                           &verification_mode, &protocol,
-                          &cacerts_file, &ciphers))
+                          &cacerts_file, &server_hostname, &ciphers))
         return NULL;
 
     /*
@@ -449,13 +458,13 @@ PySSL_sslwrap(PyObject *self, PyObject *args)
 
     return (PyObject *) newPySSLObject(Sock, key_file, cert_file,
                                        server_side, verification_mode,
-                                       protocol, cacerts_file,
+                                       protocol, cacerts_file, server_hostname,
                                        ciphers);
 }
 
 PyDoc_STRVAR(ssl_doc,
 "sslwrap(socket, server_side, [keyfile, certfile, certs_mode, protocol,\n"
-"                              cacertsfile, ciphers]) -> sslobject");
+"                              cacertsfile, ciphers, server_hostname]) -> sslobject");
 
 /* SSL object methods */
 
-- 
1.9.2

