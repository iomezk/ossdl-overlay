From 256493d9855cdddc4b330dec722baabb03d6c62b Mon Sep 17 00:00:00 2001
From: W-Mark Kubacki <wmark@hurrikane.de>
Date: Thu, 6 Nov 2014 21:51:19 +0100
Subject: [PATCH] Make Blowfish, CAST, DES, and RC4 optional with OpenSSL.

---
 cipher.c | 32 ++++++++++++++++++++++++++++++--
 1 file changed, 30 insertions(+), 2 deletions(-)

diff --git a/cipher.c b/cipher.c
index 638ca2d..8019260 100644
--- a/cipher.c
+++ b/cipher.c
@@ -52,9 +52,13 @@
 #include "openbsd-compat/openssl-compat.h"
 
 #ifdef WITH_SSH1
+# ifndef OPENSSL_NO_BF
 extern const EVP_CIPHER *evp_ssh1_bf(void);
+# endif /* !OPENSSL_NO_BF */
+# ifndef OPENSSL_NO_DES
 extern const EVP_CIPHER *evp_ssh1_3des(void);
 extern int ssh1_3des_iv(EVP_CIPHER_CTX *, int, u_char *, int);
+# endif /* !OPENSSL_NO_DES */
 #endif
 
 struct sshcipher {
@@ -79,20 +83,32 @@ struct sshcipher {
 
 static const struct sshcipher ciphers[] = {
 #ifdef WITH_SSH1
+# ifndef OPENSSL_NO_DES
 	{ "des",	SSH_CIPHER_DES, 8, 8, 0, 0, 0, 1, EVP_des_cbc },
 	{ "3des",	SSH_CIPHER_3DES, 8, 16, 0, 0, 0, 1, evp_ssh1_3des },
+# endif /* !OPENSSL_NO_DES */
+# ifndef OPENSSL_NO_BF
 	{ "blowfish",	SSH_CIPHER_BLOWFISH, 8, 32, 0, 0, 0, 1, evp_ssh1_bf },
+# endif /* !OPENSSL_NO_BF */
 #endif /* WITH_SSH1 */
 #ifdef WITH_OPENSSL
 	{ "none",	SSH_CIPHER_NONE, 8, 0, 0, 0, 0, 0, EVP_enc_null },
+# ifndef OPENSSL_NO_DES
 	{ "3des-cbc",	SSH_CIPHER_SSH2, 8, 24, 0, 0, 0, 1, EVP_des_ede3_cbc },
+# endif /* !OPENSSL_NO_DES */
+# ifndef OPENSSL_NO_BF
 	{ "blowfish-cbc",
 			SSH_CIPHER_SSH2, 8, 16, 0, 0, 0, 1, EVP_bf_cbc },
+# endif /* !OPENSSL_NO_BF */
+# ifndef OPENSSL_NO_CAST
 	{ "cast128-cbc",
 			SSH_CIPHER_SSH2, 8, 16, 0, 0, 0, 1, EVP_cast5_cbc },
+# endif /* !OPENSSL_NO_CAST */
+# ifndef OPENSSL_NO_RC4
 	{ "arcfour",	SSH_CIPHER_SSH2, 8, 16, 0, 0, 0, 0, EVP_rc4 },
 	{ "arcfour128",	SSH_CIPHER_SSH2, 8, 16, 0, 0, 1536, 0, EVP_rc4 },
 	{ "arcfour256",	SSH_CIPHER_SSH2, 8, 32, 0, 0, 1536, 0, EVP_rc4 },
+# endif /* !OPENSSL_NO_RC4 */
 	{ "aes128-cbc",	SSH_CIPHER_SSH2, 16, 16, 0, 0, 0, 1, EVP_aes_128_cbc },
 	{ "aes192-cbc",	SSH_CIPHER_SSH2, 16, 24, 0, 0, 0, 1, EVP_aes_192_cbc },
 	{ "aes256-cbc",	SSH_CIPHER_SSH2, 16, 32, 0, 0, 0, 1, EVP_aes_256_cbc },
@@ -201,11 +217,17 @@ u_int
 cipher_mask_ssh1(int client)
 {
 	u_int mask = 0;
+#ifndef OPENSSL_NO_DES
 	mask |= 1 << SSH_CIPHER_3DES;		/* Mandatory */
+#endif
+#ifndef OPENSSL_NO_BF
 	mask |= 1 << SSH_CIPHER_BLOWFISH;
+#endif
+#ifndef OPENSSL_NO_DES
 	if (client) {
 		mask |= 1 << SSH_CIPHER_DES;
 	}
+#endif
 	return mask;
 }
 
@@ -282,9 +304,11 @@ cipher_warning_message(const struct sshcipher_ctx *cc)
 {
 	if (cc == NULL || cc->cipher == NULL)
 		return NULL;
+#ifndef OPENSSL_NO_DES
 	if (cc->cipher->number == SSH_CIPHER_DES)
 		return "use of DES is strongly discouraged due to "
 		    "cryptographic weaknesses";
+#endif
 	return NULL;
 }
 
@@ -561,8 +585,10 @@ cipher_get_keyiv(struct sshcipher_ctx *cc, u_char *iv, u_int len)
 		break;
 #endif
 #ifdef WITH_SSH1
+# if !defined(WITH_OPENSSL) || !defined(OPENSSL_NO_DES)
 	case SSH_CIPHER_3DES:
 		return ssh1_3des_iv(&cc->evp, 0, iv, 24);
+# endif
 #endif
 	default:
 		return SSH_ERR_INVALID_ARGUMENT;
@@ -601,8 +627,10 @@ cipher_set_keyiv(struct sshcipher_ctx *cc, const u_char *iv)
 		break;
 #endif
 #ifdef WITH_SSH1
+# if !defined(WITH_OPENSSL) || !defined(OPENSSL_NO_DES)
 	case SSH_CIPHER_3DES:
 		return ssh1_3des_iv(&cc->evp, 1, (u_char *)iv, 24);
+# endif
 #endif
 	default:
 		return SSH_ERR_INVALID_ARGUMENT;
@@ -618,7 +646,7 @@ cipher_set_keyiv(struct sshcipher_ctx *cc, const u_char *iv)
 int
 cipher_get_keycontext(const struct sshcipher_ctx *cc, u_char *dat)
 {
-#ifdef WITH_OPENSSL
+#if defined(WITH_OPENSSL) && !defined(OPENSSL_NO_RC4)
 	const struct sshcipher *c = cc->cipher;
 	int plen = 0;
 
@@ -637,7 +665,7 @@ cipher_get_keycontext(const struct sshcipher_ctx *cc, u_char *dat)
 void
 cipher_set_keycontext(struct sshcipher_ctx *cc, const u_char *dat)
 {
-#ifdef WITH_OPENSSL
+#if defined(WITH_OPENSSL) && !defined(OPENSSL_NO_RC4)
 	const struct sshcipher *c = cc->cipher;
 	int plen;
 
-- 
2.0.4

